#!/usr/bin/env node

/* eslint no-await-in-loop: 0, no-loop-func: 0, no-continue: 0 */

const { pipe, through } = require('mississippi');
const split = require('split2');

const _ = require('lodash');
const turf = require('@turf/turf');
const turfHelpers = require('@turf/helpers');

const request = require('request-promise-native');

const HOST = 'http://127.0.0.1:7182';

const requestMatches = reqParams =>
  request({
    method: 'POST',
    uri: `${HOST}/match`,
    body: reqParams,
    headers: {
      'User-Agent': 'Request-Promise'
    },
    json: true // Automatically parses the JSON string in the response
  });

const runOSRMMatch = async (feature, chunkSize = 100) => {
  // Iterate over segment lengths
  if (chunkSize < 2) {
    return null;
  }
  const {
    properties: { shape_id, chunk_id = null },
    geometry: { coordinates }
  } = feature;

  const chunkedCoords =
    coordinates.length === 3 && chunkSize === 2
      ? [coordinates.slice(0, 2), coordinates.slice(1)]
      : _.chunk(coordinates, chunkSize);

  if (_.last(chunkedCoords).length === 1) {
    const [lastCoord] = chunkedCoords.pop();
    _.last(chunkedCoords).push(lastCoord);
  }

  const numChunks = chunkedCoords.length;

  const matchedWays = [];
  const matchConfidences = [];

  for (let i = 0; i < chunkedCoords.length; ++i) {
    const chunkCoords = chunkedCoords[i];

    const localChunkId = _.padStart(i, numChunks.toString().length, '0');

    const cur_chunk_id = chunk_id
      ? `${chunk_id}.${localChunkId}`
      : localChunkId;

    try {
      const reqParams = {
        coordinates: chunkCoords,
        snapping: 'any'
      };

      if (chunkCoords.length === 2) {
        reqParams.bearings = _.fill(
          Array(2),
          turf.bearing(turf.point(chunkCoords[0]), turf.point(chunkCoords[1]))
        );
      }
      const matchResponse = await requestMatches(reqParams);

      if (matchResponse.err) {
        console.error(
          JSON.stringify({ shape_id, chunk_id: cur_chunk_id, matchResponse })
        );
        continue;
      }
      const { ways } = matchResponse;
      const { confidence } = matchResponse;

      const logOutput = {
        shape_id,
        chunk_id: cur_chunk_id,
        ways,
        confidence
      };

      if (confidence >= 0.9) {
        matchedWays.push(ways);
      } else {
        // TODO: Recurse
        const chunkFeature = turfHelpers.lineString(chunkCoords, {
          ...feature.properties,
          chunk_id: cur_chunk_id
        });

        const { ways: rWays, confidence: rConfidence = -Infinity } =
          runOSRMMatch(chunkFeature, chunkSize / 2) || {};

        if (confidence >= rConfidence && confidence >= 0.7) {
          matchedWays.push(ways);
          matchConfidences.push(confidence);
        } else if (rConfidence > 0.7) {
          matchedWays.push(rWays);
          matchConfidences.push(rConfidence);
        }

        logOutput.rConfidence = rConfidence;

        if (confidence < 0.9) {
          logOutput.msg = 'LOW_CONFIDENCE_MATCH';
        }
      }

      console.error(JSON.stringify(logOutput));
    } catch (err) {
      console.error(
        JSON.stringify({ shape_id, chunk_id: cur_chunk_id, err }, null, 4)
      );
      return null;
    }
  }

  const ways = _(matchedWays)
    .flatten()
    .filter(_.negate(_.isNil))
    .uniq()
    .value();

  const confidence = _.mean(matchConfidences);
  return { ways, confidence };
};

pipe(
  process.stdin,
  split(JSON.parse),
  through.obj(async function matcher(feature, $, cb) {
    const {
      properties: { shape_id }
    } = feature;

    const { ways, confidence } = await runOSRMMatch(feature);

    this.push(`${JSON.stringify({ shape_id, way_ids: ways, confidence })}\n`);

    cb();
  }),
  process.stdout,
  err => {
    if (err) {
      console.error(JSON.stringify({ err }, null, 4));
    }
  }
);
